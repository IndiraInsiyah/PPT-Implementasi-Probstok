import pandas as pd
import numpy as np

bbca = pd.read_csv (r'https://raw.githubusercontent.com/IndiraInsiyah/probstok/master/BBCA.JK.csv') 
bbca = bbca.fillna(0) 
print (bbca)


bbcaN = bbca.set_index('Date').diff()
bbcaN = bbcaN.fillna(0)
print (bbcaN)


bbcaC = bbcaN['Close']
naik=0
naik_d=0
tetap=0
turun=0
turun_d=0

state = list(range(0,len(bbcaC)))
for i in range(1,len (bbcaC)) :
            if bbcaC[i] > 200:
              state[i]="Naik Drastis"
            elif 0< bbcaC[i] and bbcaC[i]<200 :
              state[i]="Naik"
            elif bbcaC[i] == 0 :
              state[i]="Tetap"
            elif -200<bbcaC[i] and bbcaC[i]<0 :
              state[i]="Turun"
            else :
              state[i]="Turun Drastis"

print("STATE FREQUENTION'S")
print("\nBanyak Nilai Drastis :", state.count ("Naik Drastis"))
print("Banyak Nilai :", state.count ("Naik"))
print("Banyak Tetap :", state.count ("Tetap"))
print("Banyak Turun :", state.count ("Turun"))
print("Banyak Turun Drastis :", state.count ("Turun Drastis"))


transition = list(range(0,25))

for i in range(1, len(state)):
  if state[i-1] != state[i]:
    if state[i-1] == 'Naik Drastis':
      if state[i] == 'Naik':
        transition[1] += 1
      elif state[i] == 'Tetap':
        transition[2] += 1
      elif state[i] == 'Turun':
        transition[3] += 1
      elif state[i] == 'Turun Drastis':
        transition[4] += 1
    elif state[i-1] == 'Naik':
      if state[i] == 'Naik Drastis':
        transition[5] += 1
      elif state[i] == 'Tetap':
        transition[7] += 1
      elif state[i] == 'Turun':
        transition[8] += 1
      elif state[i] == 'Turun Drastis':
        transition[9] += 1
    elif state[i-1] == 'Tetap':
      if state[i] == 'Naik Drastis':
        transition[10] += 1
      elif state[i] == 'Naik':
        transition[11] += 1
      elif state[i] == 'Turun':
        transition[13] += 1
      elif state[i] == 'Turun Drastis':
        transition[14] += 1
    elif state[i-1] == 'Turun':
      if state[i] == 'Naik Drastis':
        transition[15] += 1
      elif state[i] == 'Naik':
        transition[16] += 1
      elif state[i] == 'Tetap':
        transition[17] += 1
      elif state[i] == 'Turun Drastis':
        transition[19] += 1
    elif state[i-1] == 'Turun Drastis':
      if state[i] == 'Naik Drastis':
        transition[20] += 1
      elif state[i] == 'Naik':
        transition[21] += 1
      elif state[i] == 'Tetap':
        transition[22] += 1
      elif state[i] == 'Turun':
        transition[23] += 1
  else:
    if state [i-1] == 'Naik Drastis':
      if state[i] == 'Naik Drastis':
        transition[0] += 1
    elif state [i-1] == 'Naik':
      if state[i] == 'Naik':
        transition[6] += 1
    elif state [i-1] == 'Tetap':
      if state[i] == 'Tetap':
        transition[12] += 1
    elif state [i-1] == 'Turun':
      if state[i] == 'Turun':
        transition[18] += 1
    elif state [i-1] == 'Turun Drastis':
      if state[i] == 'Turun Drastis':
        transition[24] += 1

sum_ND = transition[0]+transition[1]+transition[2]+transition[3]+transition[4]
sum_N = transition[5]+transition[6]+transition[7]+transition[8]+transition[9]
sum_TE = transition[10]+transition[11]+transition[12]+transition[13]+transition[14]
sum_T = transition[15]+transition[16]+transition[17]+transition[18]+transition[19]
sum_TD = transition[20]+transition[21]+transition[22]+transition[23]+transition[24]
ND_ND = transition[0]
ND_N = transition[1]
ND_TE = transition[2]
ND_T = transition[3]
ND_TD = transition[4]

mattrans = [
            [transition[0], transition[1], transition[2], transition[3], transition[4], sum_ND],
            [transition[5], transition[6], transition[7], transition[8], transition[9], sum_N],
            [transition[10], transition[11], transition[12], transition[13], transition[14], sum_TE],
            [transition[15], transition[16], transition[17], transition[18], transition[19], sum_T],
            [transition[20], transition[21], transition[22], transition[23], transition[24], sum_TD]
          ]

print("COUNTING THE TRANSITIONS\n")
for i in mattrans :
    print (i)
    
    
NDND=('%.3f'%(transition[0]/sum_ND))
NDN = ('%.3f'%(transition[1]/sum_ND))
NDTE = ('%.3f'%(transition[2]/sum_ND))
NDT = ('%.3f'%(transition[3]/sum_ND))
NDTD = ('%.3f'%(transition[4]/sum_ND))

NND=('%.3f'%(transition[5]/sum_ND))
NN = ('%.3f'%(transition[6]/sum_ND))
NTE = ('%.3f'%(transition[7]/sum_ND))
NT = ('%.3f'%(transition[8]/sum_ND))
NTD = ('%.3f'%(transition[9]/sum_ND))

TEND=('%.3f'%(transition[10]/sum_ND))
TEN = ('%.3f'%(transition[11]/sum_ND))
TETE = ('%.3f'%(transition[12]/sum_ND))
TET = ('%.3f'%(transition[13]/sum_ND))
TETD = ('%.3f'%(transition[14]/sum_ND))

TND=('%.3f'%(transition[15]/sum_ND))
TN = ('%.3f'%(transition[16]/sum_ND))
TTE = ('%.3f'%(transition[17]/sum_ND))
TT = ('%.3f'%(transition[18]/sum_ND))
TTD = ('%.3f'%(transition[19]/sum_ND))

TDND=('%.3f'%(transition[20]/sum_ND))
TDN = ('%.3f'%(transition[21]/sum_ND))
TDTE = ('%.3f'%(transition[22]/sum_ND))
TDT = ('%.3f'%(transition[23]/sum_ND))
TDTD = ('%.3f'%(transition[24]/sum_ND))



matpro = (([
    [NDND, NDN, NDTE, NDT, NDTD],
    [NND, NN, NTE, NT, NTD],
    [TEND, TEN, TETE, TET, TETD],
    [TND, TN, TTE, TT, TTD],
    [TDND, TDN, TDTE, TDT, TDTD]
]))

print("PROBABILITY TRANSITIONS MATRIX\n")
for row in matpro:
 print (' '.join(row))


mat1 = np.array(([
    [0.164, 0.180, 0.148, 0.311, 0.197],
    [0.213, 0.246, 0.246, 0.410, 0.344],
    [0.262, 0.246, 0.361, 0.295, 0.361],
    [0.426, 0.639, 0.377, 0.508, 0.541],
    [0.590, 0.475, 0.377, 0.639, 0.6071],
]))

p2 = np.dot(mat1,mat1)
print("PROBABILITAS PERIODE\n\n")
print("matrix p2:\n")
print(p2, "\n\n")

p3 = np.dot(p2,p2)
print("matrix p3:\n")
print(p3, "\n\n")

p4 = np.dot(p3,p3)
print("matrix p4:\n")
print(p4, "\n\n")

p5 = np.dot(p4,p4)
print("matrix p5:\n")
print(p5, "\n\n")


NDtratition = np.array([0.164,0.213,0.262,0.426,0.590])
Ntrantition = np.array([0.180,0.246,0.246,0.639,0.475])
TEtrantition = np.array([0.148,0.246,0.361,0.377,0.377])
Ttrantition = np.array([0.311,0.410,0.295,0.508,0.639])
TDtrantition = np.array([0.197,0.344,0.361,0.541,0.6071])

hasil = NDtratition + Ntrantition + TEtrantition + Ttrantition + TDtrantition
phi = hasil / 5
print("AKURASI PROBABILITAS PERIODE\n\n")
print("PHI AS AN AVERAGE PROBABILITY TRANSITIONS MATRIX\n")
print(phi, "\n\n")

print("AKURASI DAY 2 FORECASTING\n")
akurasi2 = np.dot(phi,p2)
print(akurasi2, "\n\n")

print("AKURASI DAY 3 FORECASTING\n")
akurasi3 = np.dot(phi,p3)
print(akurasi3, "\n\n")

print("AKURASI DAY 4 FORECASTING\n")
akurasi4 = np.dot(phi,p4)
print(akurasi4, "\n\n")

print("AKURASI DAY 5 FORECASTING\n")
akurasi5 = np.dot(phi,p5)
print(akurasi5, "\n\n")
